#!/usr/bin/env python

import socket
import struct
from os import environ as env

import lightCommon as lc
import HTMLHelper as html

print(html.textHeader())

lightsOn=[]

# Get every node that has lights on
for node in lc.nodeList:

    reqType = lc.msg_dump
    lightNum = 0
    lightStatus = 0

    try:        
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((node, lc.port()))
        s.sendall(struct.pack(lc.packString,reqType,lightNum,lightStatus))

        recvMsg = s.recv(struct.calcsize(lc.queryPackString))
        reqType,lightNum,lightStatus,lightName = struct.unpack(lc.queryPackString,recvMsg)

        while reqType is not lc.msg_done:

            if ( int(lightStatus) == lc.msg_off ):
                lightsOn.append((node,lightNum,lightName))
                
            recvMsg = s.recv(struct.calcsize(lc.queryPackString))
            reqType,lightNum,lightStatus,lightName= struct.unpack(lc.queryPackString,recvMsg)
        
        s.close()

    except socket.error:
        html.printl('Error connecting to node ' + node)

if len(lightsOn) > 0:
    html.printl('Turning on: ')

for light in lightsOn:        
    lightNum = light[1]
    lightName = light[2]
    lightStatus = lc.msg_on
    node = light[0]

    rc = lc.sendSetMsg(node,lightNum,lightStatus)
    html.printl(str(lightName))


html.printl('All lights on')

print(html.textFooter())
